#!/usr/bin/env python
'''
A set of functions for quick financial analysis of an investment
opportunity and a series of projected cashflows.

For further details and pros/cons of each function please refer
to the respective wikipedia page:

    payback_period
        http://en.wikipedia.org/wiki/Payback_period

    net present value
        http://en.wikipedia.org/wiki/Net_present_value

    internal rate of return
        http://en.wikipedia.org/wiki/Internal_rate_of_return
'''

import sys, locale

def payback_of_investment(investment, cashflows):
    """The payback period refers to the length of time required
       for an investment to have its initial cost recovered.

       >>> payback_of_investment(200.0, [60.0, 60.0, 70.0, 90.0])
       3.1111111111111112
    """
    total, years, cumulative = 0.0, 0, []
    if not cashflows or (sum(cashflows) < investment):
        raise Exception("insufficient cashflows")
    for cashflow in cashflows:
        total += cashflow
        if total < investment:
            years += 1
        cumulative.append(total)
    A = years
    B = investment - cumulative[years-1]
    C = cumulative[years] - cumulative[years-1]
    return A + (B/C)

def payback(cashflows):
    """The payback period refers to the length of time required
       for an investment to have its initial cost recovered.

       (This version accepts a list of cashflows)

       >>> payback([-200.0, 60.0, 60.0, 70.0, 90.0])
       3.1111111111111112
    """
    investment, cashflows = cashflows[0], cashflows[1:]
    if investment < 0 : investment = -investment
    return payback_of_investment(investment, cashflows)

def npv(rate, cashflows):
    """The total present value of a time series of cash flows.

        >>> npv(0.1, [-100.0, 60.0, 60.0, 60.0])
        49.211119459053322
    """
    total = 0.0
    for i, cashflow in enumerate(cashflows):
        total += cashflow / (1 + rate)**i
    return total

def irr(cashflows, iterations=100):
    """The IRR or Internal Rate of Return is the annualized effective
       compounded return rate which can be earned on the invested
       capital, i.e., the yield on the investment.

       >>> irr([-100.0, 60.0, 60.0, 60.0])
       0.36309653947517645

    """
    rate = 1.0
    investment = cashflows[0]
    for i in range(1, iterations+1):
        rate *= (1 - npv(rate, cashflows) / investment)
    return rate


# enable placing commas in thousands
locale.setlocale(locale.LC_ALL, "")
# convenience function to place commas in thousands
format = lambda x: locale.format('%d', x, True)

def investment_analysis(discount_rate, cashflows):
    """Provides summary investment analysis on a list of cashflows
       and a discount_rate.

       Assumes that the first element of the list (i.e. at period 0)
       is the initial investment with a negative float value.
    """
    _npv = npv(discount_rate, cashflows)
    ts = [('year', 'cashflow')] + [(str(x), format(y)) for (x,y) in zip(
           range(len(cashflows)), cashflows)]
    print "-" * 70
    for y,c in ts:
        print y + (len(c) - len(y) + 1)*' ',
    print
    for y,c in ts:
        print c + ' ',
    print
    print
    print "Discount Rate: %.1f%%" % (discount_rate * 100)
    print
    print "Payback: %.2f years" % payback(cashflows)
    print "    IRR: %.2f%%" % (irr(cashflows) * 100)
    print "    NPV: %s" % format(_npv)
    print
    print "==> %s investment of %s" % (
        ("Approve" if _npv > 0 else "Do Not Approve"), format(-cashflows[0]))
    print "-" * 70

def main(inputs):
    """commandline entry point
    """

    usage = '''Provides analysis of an investment and a series of cashflows.

    usage: invest discount_rate [cashflow0, cashflow1, ..., cashflowN]
        where
            discount_rate is the rate used to discount future cashflows
                             to their present values
            cashflow0 is the investment amount (always a negative value)
            cashflow1 .. cashflowN values can be positive (net inflows)
                                                 or
                                                 negative (net outflows)
    for example:
        invest 0.05 -10000 6000 6000 6000
    '''

    try:
        rate, cashflows = inputs[0], inputs[1:]
        investment_analysis(float(rate), [float(c) for c in cashflows])
    except IndexError:
        print usage
        sys.exit()

if __name__ == '__main__':
        vals =[-27074500.0, -1999.9999999999998, -1999.9999999999989, -1999.9999999999995, -2000.000000000001, -1999.9999999999998, -2000.000000000001, -2000.0, -1999.9999999999995, -2000.000000000001, -1999.9999999999998, -2000.000000000001, -2000.0, -1999.9999999999998, -1999.9999999999989, -1999.9999999999995, -5000.000000000001, -5000.000000000001, -5000.0, -5000.0, -5000.0, -27989.515060972437, -29953.687474252176, -31799.349318101493, -31960.94533695752, -31508.658896845402, -29873.092774696182, -28437.091357015335, -27075.91556913963, -26250.635276204252, -26197.954443290495, -25007.984698291111, -23499.329320556542, -25909.041526289177, -28186.819566761813, -31118.521604235168, -31223.054131316618, -30891.356716925802, -28930.509793402147, -27357.251622661628, -24932.349100704887, -23611.433809217735, -23991.537114556646, -21729.168504809757, -24052.772853340517, -25836.669889710713, -28248.536256117368, -31055.234291350658, -31310.69011592133, -30874.319920679583, -28983.060597651711, -26560.590699597291, -25359.033935944972, -23525.454528744813, -23341.642510339079, -22041.064770586454, -23312.071878637624, -26100.377497723719, -28260.92499292655, -31016.233522699782, -31330.092330901243, -30728.100208359829, -28523.32513646275, -26916.913550421013, -24969.751273203394, -23023.178690053202, -22842.335039135127, -21716.458604444444, -22528.652219798314, -25570.296030508602, -28545.262537965813, -30947.388646830892, -31184.999576497765, -30711.864071518561, -28916.270273844653, -26586.556337623188, -25226.40274675189, -23117.873997962641, -22721.097575205349, -21652.057610803313, -22942.755204882706, -26044.324967384571, -27746.22366672894, -31052.292380574057, -31232.123822265974, -30639.397826283064, -28876.884938606381, -26866.805711380541, -25425.829766220297, -22132.529035467902, -22784.294680082283, -21747.200611469496, -23218.696804385807, -24887.252692230773, -27962.926702304874, -31046.064449029145, -31164.347349463496, -30493.847477997289, -29098.709898036919, -26096.246669827378, -24816.931835632997, -23272.508935406971, -22796.469968076279, -21528.833071906825, -21747.702968410827, -24841.159259197906, -27979.734097481218, -30836.167603625014, -31282.005813492164, -30589.433061472548, -28465.017456768845, -26576.049387711944, -24000.780068576489, -22224.82192293922, -23248.897276215059, -19661.357248117558, -21806.383115952871, -25621.856159595911, -27972.802508124543, -30807.629607299961, -31130.625000925625, -30648.729636241442, -28496.190112927834, -25908.620408928291, -23967.476237529299, -22227.041641186697, -22189.323991162375, -21666.752354647666, -22530.737338864426, -24540.100138958405, -28022.629583247734, -30375.323484772111, -31045.616149712587, -30556.337732848791, -28293.908562595512, -25557.081053080088, -23989.791009045381, -21679.373965705978, -22065.447057938356, -20283.670107803853, -22137.436747902582, -24580.938820909454, -27321.730770691363, -30616.254405308522, -30768.44473315942, -30482.074202586984, -28390.446029571081, -25787.304648997873, -24124.188796199531, -22156.431154741782, -22079.32793357184, -20126.058864701321, -21198.375975746007, -24805.120063306342, -28038.106251386751, -30742.846982032112, -31056.918285657615, -30358.347842126524, -28379.463113606307, -26037.803419428099, -23330.468880756242, -21375.595814986824, -21526.306578060816, -20122.251992473681, -21557.130467730927, -25150.609511759314, -27571.877823950304, -30614.284212782681, -30881.987778514263, -30174.576578881573, -27995.918256412933, -25743.032667371426, -23484.492754634532, -20717.796413746259, -21721.592317584775, -20488.076096645134, -23606.698256167412, -25633.453527582369, -28607.682911249896, -31373.867367461946, -31547.737567791984, -31107.592381498638, -28973.650723091763, -27340.375551793521, -24955.186364956891, -23532.904793759, -23436.372953595615, -22174.992804672373, -23309.077178759828, -25962.482749824016, -28519.205443957107, -31227.925808412838, -31531.810572666262, -30842.323061149855, -29166.244264490138, -27276.758878486784, -25136.820988273619, -23319.739466969375, -22998.93265855241, -22096.094768580668, -23695.998115795646, -25839.405464102507, -28472.172974415342, -31116.238660184717, -31474.181296438081, -30977.088569988446, -28978.514073711016, -26583.081689587445, -24962.937662335789, -23705.360610864351, -23574.309702227882, -22248.862301322333, -23488.048627892866, -26045.988594565006, -28406.0962131862, -30842.291169552336, -31556.235194512272, -30843.92478886075, -28818.868121808504, -26585.19311456693, -25562.651063800622, -23312.684808618549, -23192.524322342193, -21198.367998038986, -22836.577257352808, -25578.912633610253, -28515.564566383218, -30966.071581430497, -31430.742774999882, -30743.218208914819, -28295.42307176302, -26968.363589737266, -25098.541840819984, -22476.809762688154, -22914.68477497805, -20634.869221724563, -22905.133653371726, -25780.782154965818, -28213.347956722395, -30944.888094871752, -31392.844878705655, -30793.209663081492, -28868.992064608916, -26197.510858434835, -25018.217897539704, -22958.614320588043, -23207.369119624364, -21087.072839689587, -22938.417827872552, -25192.506936712838, -27703.777331446705, -30849.5663481187, -31289.818869253355, -30784.491405426768, -28611.009066068149, -26238.146703815859, -24285.502341365289, -23180.261582541978, -23136.625838942258, -21212.209253811954, -22158.865426513315, -24678.123544700298, -27924.469387134519, -30905.688801283097, -30852.252882020613, -30596.057012362489, -28585.086705011199, -26645.477420380128, -23765.150751796442, -22964.097681890067, -22832.995655966304, -21228.106014752062, -21622.24030134231, -25470.623925411513, -28628.15097038052, -30545.741156871212, -31085.702318758151, -30661.340525932872, -28229.318016286936, -25942.510695748671, -24209.508621572633, -21597.0603728635, -22430.831445530144, -20072.172128274207, -21450.101314609044, -25099.351762667353, -27819.228309904905, -30766.929261814756, -30871.280180416506, -30541.835406287464, -28478.265776498978, -25874.94417764627, -23672.931605839385, -21490.959563363387, -21379.89462981424, -19979.558312874877, -22227.584195286305, -25240.515752732157, -27543.32729064611, -30723.348897630254, -31092.180201200907, -30281.940613606675, -28278.666411253031, -25451.279228340849, -24206.586620638656, -22066.873988308165, -21816.905214432143, -19185.615557666169, -20953.228457393812, -24249.884754713716, -27195.857450299096, -30564.885144341653, -31130.049485609023, -30221.574431338126, -28255.996985377271, -25850.461997942351, -23526.108708028354, -21167.93510190447, -21304.869051450114, -19659.319123379428, -21291.065437944257, -23842.289149482003, -27066.299408642783, -30623.030516621915, -30952.370210270277, -30158.353455348333, -27684.584614262014, -24900.434649946754, -22651.525633008467, -20633.599747088389, -21437.619879593469, -19620.777289094207, -21448.81171577693, -24392.929906854763, -27138.674535551079, -30403.765976568662, -30512.183699140907, -30137.26616227975, -28014.340063369746, -24985.089501877119, -22439.789917415081, -20682.990439347865, -20822.034827645464, -19166.217132522128, -20335.06142520078, -23711.994993186407, -27339.364300269819, -30322.509266362911, -30653.409941037542, -30062.852065117982, -27594.598124351389, -25430.156261952456, -22643.635036887761, -20444.644477879287, -20379.279207891923, -19266.37552586044, -20214.961746507899, -23164.473838215181, -26474.021077547171, -30359.415408935824]
        print irr(vals, iterations=100)